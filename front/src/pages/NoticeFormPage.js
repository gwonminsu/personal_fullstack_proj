import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { fetchNoticeDetail, fetchCategories, createNotice, updateNotice } from '../services/noticeService';
import sessionService from '../services/sessionService';

function NoticeFormPage() {
    const [title, setTitle] = useState('');
    const [category, setCategory] = useState('');
    const [categories, setCategories] = useState([]);
    const [content, setContent] = useState('');
    const [images, setImages] = useState([]);  // Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°úÎ•º Ï†ÄÏû•ÌïòÎäî Î∞∞Ïó¥
    const user = sessionService.getUser();
    const { id } = useParams();
    const navigate = useNavigate();

    // Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞ Î°úÎî©
    useEffect(() => {
        document.body.classList.add('bg-slate-200');
        const loadCategories = async () => {
            try {
                const categoryData = await fetchCategories();
                // console.log("Categories Loaded:", categoryData);
                setCategories(categoryData);
                if (categoryData.length > 0) {
                    setCategory(categoryData[0].idx); // Ï¥àÍ∏∞ Ïπ¥ÌÖåÍ≥†Î¶¨ IDÎ°ú ÏÑ§Ï†ï
                }
            } catch (error) {
                console.error('Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Î∂àÎü¨Ïò§Îäî Ï§ë ÏóêÎü¨ Î∞úÏÉù', error);
            }
        };

        if (id) {
            fetchNoticeDetail(id).then((data) => {
                setTitle(data.title);
                setCategory(data.categoryId);
                setContent(data.content);
            });
        }

        loadCategories();

        return () => {
            document.body.classList.remove('bg-slate-200');
        };
    }, [id]);

    const handleSubmit = async (event) => {
        event.preventDefault();
        const formData = new FormData();
        formData.append('title', title);
        formData.append('content', content);
        formData.append('categoryId', category);
        formData.append('userId', user.userId);
        images.forEach(image => {
            formData.append('images', image); // 'images'ÎùºÎäî Ïù¥Î¶ÑÏúºÎ°ú Î™®Îì† Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ Ï∂îÍ∞Ä
        });
        
        console.log("formData Ï†êÍ≤Ä" + Array.from(formData.entries()));
        try {
            if (id) {
                await updateNotice(id, formData);
            } else {
                await createNotice(formData);
            }
            navigate('/notice');
        } catch (error) {
            console.error('Í≥µÏßÄÏÇ¨Ìï≠ Ï†ÄÏû• Ï§ë ÏóêÎü¨ Î∞úÏÉù', error);
        }
    };

    const handleImageUpload = (event) => {
        setImages([...images, ...Array.from(event.target.files)]); // ÌååÏùº Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä
    };

    const removeImage = (index) => {
        setImages(images.filter((_, i) => i !== index)); // Ïù∏Îç±Ïä§Î•º ÏÇ¨Ïö©ÌïòÏó¨ Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
    };

    return (
        <div className="container mx-auto p-4">
            <div className="bg-gray-100 p-6 rounded-lg shadow-lg min-h-screen">
                <div className="container mx-auto p-4 flex items-center justify-between">
                    <button onClick={() => navigate(-1)} className="mb-4">
                        üîô
                    </button>
                    <h2 className="text-xl font-semibold mb-2">Í≥µÏßÄ ÏûëÏÑ± Ìèº</h2>
                    <div className='pl-10'></div>
                </div>
                <div className='pl-20 pr-20'>
                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div>
                            <label htmlFor="title" className="block text-sm font-medium text-gray-700">Ï†úÎ™©</label>
                            <input
                                id="title"
                                name="title"
                                type="text"
                                required
                                className="mt-1 block w-4/5 border-gray-300 rounded-md shadow-sm"
                                placeholder="Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî"
                                value={title}
                                onChange={(e) => setTitle(e.target.value)}
                            />
                        </div>

                        <div>
                            <label htmlFor="category" className="block text-sm font-medium text-gray-700">Ïπ¥ÌÖåÍ≥†Î¶¨</label>
                            <select
                                id="category"
                                name="category"
                                required
                                className="mt-1 block w-1/5 border-gray-300 rounded-md shadow-sm"
                                value={category}
                                onChange={(e) => {
                                    console.log("Actual option element:", e.target.options[e.target.selectedIndex]); // Ïã§Ï†ú ÏÑ†ÌÉùÎêú option ÏöîÏÜå Í≤ÄÏÇ¨
                                    setCategory(e.target.value);
                                }}
                            >
                                {categories.map((cat) => (
                                    <option key={cat.idx} value={cat.idx}>
                                        {cat.name}
                                    </option>
                                ))}
                            </select>
                        </div>

                        <div>
                            <label htmlFor="image-upload" className="block text-sm font-medium text-gray-700">ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú</label>
                            <input
                                id="image-upload"
                                name="image-upload"
                                type="file"
                                multiple // Ïó¨Îü¨ ÌååÏùº ÏÑ†ÌÉù Í∞ÄÎä•
                                className="mt-1 block w-full text-sm text-gray-700"
                                onChange={handleImageUpload}
                            />
                            <div className="mt-2">
                                {images.map((image, index) => (
                                    <div key={index} className="flex items-center space-x-2">
                                        <span>{image.name}</span>
                                        <button type="button" onClick={() => removeImage(index)}>X</button>
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div>
                            <label htmlFor="content" className="block text-sm font-medium text-gray-700">ÎÇ¥Ïö©</label>
                            <textarea
                                id="content"
                                name="content"
                                rows="4"
                                required
                                className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
                                placeholder="ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî"
                                value={content}
                                onChange={(e) => setContent(e.target.value)}
                            ></textarea>
                        </div>

                        <div className="flex justify-end">
                            <button
                                type="submit"
                                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                            >
                                Îì±Î°ùÌïòÍ∏∞
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        
    );
}

export default NoticeFormPage;
